(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{421:function(s,t,a){"use strict";a.r(t);var e=a(19),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[s._v("#")]),s._v(" 正则表达式")]),s._v(" "),a("h2",{attrs:{id:"一-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-定义"}},[s._v("#")]),s._v(" 一 定义")]),s._v(" "),a("h3",{attrs:{id:"_1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[s._v("#")]),s._v(" 1 概念")]),s._v(" "),a("blockquote",[a("p",[s._v("描述字符模式的对象")])]),s._v(" "),a("h3",{attrs:{id:"_2-创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建方式"}},[s._v("#")]),s._v(" 2 创建方式")]),s._v(" "),a("ul",[a("li",[s._v("字面量形式")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" expression "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("pattern"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("flags\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pattern 需要匹配的字符串模式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// flags 修饰符")]),s._v("\n")])])]),a("ul",[a("li",[s._v("构造函数的形式")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" expression "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[bc]at'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 两个参数格式都是字符串。")]),s._v("\n")])])]),a("p",[s._v("注意")]),s._v(" "),a("ul",[a("li",[s._v("第一个参数是模式字符串，因为字符串和正则表达式都是使用 \\ 进行转转义，所以在第一个参数中，如果出现 \\，则需要双重转义。第二个是修饰符。")]),s._v(" "),a("li",[s._v("字面量形式的正则已经创建便无法再去改变。可通过构造函数的形式来动态的生成一个正则实例。")])]),s._v(" "),a("p",[s._v("正则表达式中的特殊符号")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//元字符 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" \\ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配 spiderMan")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v(".piderMan")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配 .spiderMan")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\.spiderMan")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])])]),a("h3",{attrs:{id:"_3-模式规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-模式规则"}},[s._v("#")]),s._v(" 3 模式规则")]),s._v(" "),a("blockquote",[a("p",[s._v("正则表达式的模式规则是由一个字符序列组成的。包括所有的字母和数字在内，绝大多数字符都是按照直接量仅描述待匹配的字符的。但对于一些具有特殊语义的字符，并不会按照字面意义去匹配。例如^ $，分别用来对应字符串的开始和结束。")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("字符")]),s._v(" "),a("ul",[a("li",[s._v(".  任意字符。除换行符和其他unicode行终止符")]),s._v(" "),a("li",[s._v("\\w 任何 ASCLL 字符组成的单词。[a-zA-Z0-9]")]),s._v(" "),a("li",[s._v("\\W 任何不是 ASCLL 字符组成的单词。 [^a-zA-Z0-9]")]),s._v(" "),a("li",[s._v("\\s 任何空白符")]),s._v(" "),a("li",[s._v("\\S 任何非空白字符")]),s._v(" "),a("li",[s._v("\\d 任何 ASCLL 数字，等价于 [0-9]")]),s._v(" "),a("li",[s._v("\\D 等价于 [^0-9]")]),s._v(" "),a("li",[s._v("[...] 括号内的任意字符")]),s._v(" "),a("li",[s._v("[^...] 不在括号内的任意字符")])])]),s._v(" "),a("li",[a("p",[s._v("重复性")]),s._v(" "),a("blockquote",[a("p",[s._v("正则表达式中某元素的重复次数")])]),s._v(" "),a("ul",[a("li",[s._v("{n,m} 匹配"),a("strong",[s._v("前一项")]),s._v("至少 n 次，最多 m 次。")]),s._v(" "),a("li",[s._v("{n,}  匹配前一项至少 n 次")]),s._v(" "),a("li",[s._v("{n}   匹配前一项 n 次")]),s._v(" "),a("li",[s._v("?  匹配前一项 0-1 次。即 {0-1}")]),s._v(" "),a("li",[s._v("+  匹配前一项 1 次至多次。即 {1,}")]),s._v(" "),a("li",[s._v("*  匹配前一项 0 至多次。即 {0,}")])]),s._v(" "),a("p",[s._v("贪婪性的重复。匹配重复的字符尽可能多的匹配字符, 而且允许后续的正则表达式继续匹配。\n非贪婪性重复。在待匹配的字符后面跟着一个?，正则便会尽量少的匹配字符。")])])]),s._v(" "),a("p",[s._v("$mdFormatter$14$mdFormatter$")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 贪婪匹配")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123abc'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 123 ")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 非贪婪匹配")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d+?")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123abc'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//特例")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d+?a")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123abc'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 123a")]),s._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("上面特例出现的原因是正则总是会寻找字符串中第一个可能匹配的位置。由于匹配是从字符串的第一个字符开始的。所以不会考虑字符串的子串中更短的匹配。\n")])])]),a("ul",[a("li",[s._v("选择、分组和引用。\n"),a("ul",[a("li",[s._v("选择符号 |")])])])]),s._v(" "),a("p",[s._v("$mdFormatter$14$mdFormatter$")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("green|red")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'apple green'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// green")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\n\n    从左到右匹配，直到发现了匹配项。如果符号左边的匹配项被匹配，则会自动忽略右边的匹配项。及时它右边的也会匹配。\n\n    - 分组 ()\n        * 作用\n            1. 把单独的项组合成一个字表达式。以便可以用重复性字符或选择符来进行处理。\n            2. 在完整的模式中引用子模式。当一个正则表达式成功地和目标字符串相匹配时，可以从目标串中抽出和圆括号中相匹配的部分。\n            3. 允许在同一正则表达式的后部引用前面的子表达式。在执行过程中用 "\\n" 来实现，n 代表圆括号的子表达式在正则表达式中的位置，同理，在执行过后，可通过 $n 来表示。就是参与计算的左括号的位置。\n\n            ')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("\n    js\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 匹配 spider || spiderMan")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(spider)?Man")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 可获取圆括号中子表达式的子串")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(\\w+)\\s(\\w+)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spider Man'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取执行中的引用")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(\\w+)\\s(\\w+)\\s\\1")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spider Man spider'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取执行过后引用")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(\\w+)\\s(\\w+)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spider Man spider'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" replaceStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$2 $1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("        如果不想让组表达式产生引用。可以用 (?:) 来进行分组。\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("(?:\\w+)\\s(\\w+)\\s\\1")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spider Man Man'")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("总结：| () (?:) \\n  \n")])])]),a("h3",{attrs:{id:"_4-修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-修饰符"}},[s._v("#")]),s._v(" 4 修饰符")]),s._v(" "),a("blockquote",[a("p",[s._v("对匹配的规则进行说明")])]),s._v(" "),a("ul",[a("li",[s._v("i (case-insensitive) 不区分大小写模式")]),s._v(" "),a("li",[s._v("g (global) 模式应用于所有字符串，而非在发现第一个匹配时立即停止。")]),s._v(" "),a("li",[s._v("m (multiline) 多行模式。到达文本的末尾时会继续查找下一行中是否存在和模式匹配的串。")])]),s._v(" "),a("h3",{attrs:{id:"_5-正则实例的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-正则实例的属性和方法"}},[s._v("#")]),s._v(" 5 正则实例的属性和方法")]),s._v(" "),a("h4",{attrs:{id:"_1-正则实例的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-正则实例的属性"}},[s._v("#")]),s._v(" 1 正则实例的属性")]),s._v(" "),a("ul",[a("li",[s._v("source 只读 字符串 正则表达式的文本")]),s._v(" "),a("li",[s._v("global 只读 布尔值 是否带有标志 g")]),s._v(" "),a("li",[s._v("ignoreCase 只读 布尔值 是否带有标志 i")]),s._v(" "),a("li",[s._v("multiline 只读 布尔值 是否带有标志 m")]),s._v(" "),a("li",[s._v("lastIndex 可读写 整数 如果带有 g 修饰符。表示开始搜索下一匹配项的字符位置，从 0 算起。")])]),s._v(" "),a("h4",{attrs:{id:"_2-正则实例的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-正则实例的方法"}},[s._v("#")]),s._v(" 2 正则实例的方法")]),s._v(" "),a("ul",[a("li",[s._v("exec()\n"),a("ul",[a("li",[s._v("作用 在一个字符串中进行匹配检索。")]),s._v(" "),a("li",[s._v("参数 引用字符串")]),s._v(" "),a("li",[s._v("返回 包含第一个匹配项信息的数组。没有匹配项返回 null。")]),s._v(" "),a("li",[s._v("特点\n"),a("ul",[a("li",[s._v("不设置 g 修饰符。多次匹配始终返回第一个匹配项。设置 g 修饰符。下一次调用会在字符串中继续查找匹配项。")])])])])])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" text2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cat, bat, sat, fat'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" pattern2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v(".at")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("g")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pattern2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pattern2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("text2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pattern2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[a("img",{attrs:{src:"media/15753818851537/15755211639478.png",alt:"-w477"}})]),s._v(" "),a("ul",[a("li",[s._v("test()\n"),a("ul",[a("li",[s._v("作用 检测字符串是否与模式匹配")]),s._v(" "),a("li",[s._v("参数 引用字符串")]),s._v(" "),a("li",[s._v("返回 布尔值")])])])]),s._v(" "),a("h3",{attrs:{id:"_6-可用于模式匹配的字符串方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-可用于模式匹配的字符串方法"}},[s._v("#")]),s._v(" 6 可用于模式匹配的字符串方法")]),s._v(" "),a("ul",[a("li",[s._v("search()\n"),a("ul",[a("li",[s._v("作用 返回第一个与之匹配的子串的起始位置")]),s._v(" "),a("li",[s._v("参数 正则表达式")]),s._v(" "),a("li",[s._v("返回 第一个子串所匹配的起始位置。找不到返回 -1")]),s._v(" "),a("li",[s._v("特性\n"),a("ul",[a("li",[s._v("如果参数不是正则表达式，会默认同 RegExp 将它转换成正则表达式")])])]),s._v(" "),a("li",[s._v("缺点\n"),a("ul",[a("li",[s._v("不支持全局检索。它会忽略正则表达式参数中的修饰符 g。")])])])])])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("man")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[s._v("i")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'spider man'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("search")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("re"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 7")]),s._v("\n\n")])])]),a("ul",[a("li",[s._v("replace(reg, str)\n"),a("ul",[a("li",[s._v("作用 执行字符串的检索和替换操作")]),s._v(" "),a("li",[s._v("参数 第一个是正则表达式，第二个是要进行替换的字符串")]),s._v(" "),a("li",[s._v("返回 返回一个新字符串。其中，与源串中模式匹配的子串，将会被第二个参数替换")]),s._v(" "),a("li",[s._v("特性\n"),a("ul",[a("li",[s._v("可以设置修饰符 g。\n"),a("ul",[a("li",[s._v("设置g。所有与模式匹配的子串都将会被替换")]),s._v(" "),a("li",[s._v("不设置g。只替换所匹配的第一个子串")])])]),s._v(" "),a("li",[s._v("如果第一个参数不是正则表达式，责会直接搜索这个字符串，不会调用构造函数强转")]),s._v(" "),a("li",[s._v("第二个参数中如果出现了 $n 字符，将会用指定的子表达式相匹配的文本来替换这两个字符")]),s._v(" "),a("li",[s._v("第二个参数可以是一个函数，该函数能动态地计算替换字符串")])])])])]),s._v(" "),a("li",[s._v("match(reg)\n"),a("ul",[a("li",[s._v("作用 检索返回一个字符串匹配正则表达式的结果")]),s._v(" "),a("li",[s._v("参数 正则表达式")]),s._v(" "),a("li",[s._v("返回\n"),a("ul",[a("li",[s._v("未使用g，返回第一个完整匹配及其相关匹配组。格式为数组")]),s._v(" "),a("li",[s._v("使用g,返回与完整表达式匹配的所有结果，但不会返回捕获组。")])])]),s._v(" "),a("li",[s._v("特性\n"),a("ul",[a("li",[s._v("如果参数不是正则表达式，则会隐士的调用构造函数创建一个正则对象")]),s._v(" "),a("li",[s._v("如果不设置 g 标志，返回值与 exec 方法一致。")])])])])]),s._v(" "),a("li",[s._v("split(spa, limit)\n"),a("ul",[a("li",[s._v("作用 用指定的分隔符将字符串分割成一个字符串数组")]),s._v(" "),a("li",[s._v("参数\n"),a("ul",[a("li",[s._v("spa 分隔符。可以为字符串或者正则")]),s._v(" "),a("li",[s._v("limit 一个整数，限定返回的分割片段数量")])])]),s._v(" "),a("li",[s._v("返回 源字符串以分隔符出现位置分隔而成的一个 Array")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);